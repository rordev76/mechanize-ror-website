= Mechanize Release Notes

== 0.4.5

This release comes with a new filtering system.  You can now manipulate the
response body before mechanize parses it.  This can be useful if you know that
the HTML you need to parse is broken, or if you want to speed up the parsing.
This filter can be done on a global basis, or on a per page basis.  Check out
the new examples in the EXAMPLES file for usage.

This release is also starting to phase out the misspelled method
WWW::Mechanize#basic_authetication.  If you are using that method, please
switch to WWW::Mechanize#basic_auth.

The 0.4.5 release has many bug fixes, most noteably better cookie parsing and
better form support.

== 0.4.4

This release of mechanize comes with a new "Option" object that can be
accessed from select fields on forms.  That means that you can figure out
what option to set based on the text in the select field.  For example:

selectlist = form.fields.name('selectlist').first
selectlist.value = selectlist.options.find { |o| o.text == 'foo'}.value

== 0.4.3

The new syntax for finding things like forms, fields, frames, etcetera looks
like this:

page.links.with.text 'Some Text'

The preceding statement will find all links in a page with the text
'Some Text'.  This can be applied to form fields as well:

form.fields.with.name 'email'

These can be chained as well like this:

form.fields.with.name('email').and.with.value('blah@domain.com')

'with' and 'and' can be omitted, and the old way is still supported.  The
following statements all do the same thing:

form.fields.find_all { |f| f.name == 'email' }
form.fields.with.name('email')
form.fields.name('email')
form.fields(:name => 'email')

Regular expressions are also supported:

form.fields.with.name(/email/)

