= WWW::Mechanize examples

== Google
  require 'rubygems'
  require 'mechanize'
  require 'logger'
  
  agent = WWW::Mechanize.new { |a| a.log = Logger.new("mech.log") }
  agent.user_agent_alias = 'Mac Safari'
  page = agent.get("http://www.google.com/")
  search_form = page.forms.with.name("f").first
  search_form.fields.name("q").first.value = "Hello"
  search_results = agent.submit(search_form)
  puts search_results.body

== Rubyforge
  require 'mechanize'
  
  agent = WWW::Mechanize.new {|a| a.log = Logger.new(STDERR) }
  page = agent.get('http://rubyforge.org/')
  link = page.links.text(/Log In/).first
  page = agent.click(link)
  form = page.forms[1]
  form.fields.find {|f| f.name == 'form_loginname'}.value = ARGV[0]
  form.fields.find {|f| f.name == 'form_pw'}.value = ARGV[1]
  page = agent.submit(form, form.buttons.first)
  
  puts page.body

== File Upload
This example uploads one image as two different images to flickr.

  require 'rubygems'
  require 'mechanize'
  
  agent = WWW::Mechanize.new
  page = agent.get('http://flickr.com/signin/flickr/')
  form = page.forms.first
  form.fields.name('email').first.value = ARGV[0]
  form.fields.name('password').first.value = ARGV[1]
  page = agent.submit(form)
  page = agent.click page.links.text('Upload').first
  form = page.forms.first
  img1 = form.file_uploads.name('file1').first
  img2 = form.file_uploads.name('file2').first
  
  img1.file_name = img2.file_name = ARGV[2]
  File.open(ARGV[2], "r") { |f|
    img1.file_data = img2.file_data = f.read 
  }
  
  img1.mime_type = img2.mime_type = 'image/jpeg'
  
  agent.submit(form)
  
== Page Body Filter
This example shows how to preprocess a body before mechanize parses it.  The
body filter sends the page body to the code block, and parses what the code
block returns.  The filter on WWW::Page#body_filter is a "per-page" filter,
meaning that it is only applied to one page object.

  require 'rubygems'
  require 'mechanize'
  
  agent = WWW::Mechanize.new
  
  page = agent.get('http://google.com/')
  page.body_filter = lambda { |body|
      body.gsub(/google/i, "Net::DAAP::Client")
  }
  puts page.body
  
  page = agent.get('http://google.com/')
  puts page.body

== Global Body Filter
The body filter can be set on the WWW::Mechanize object for use as a global
filter.  The filter set will be applied to every page that is requested.  The
following example shows the global filter being used, then being set back to
the original filter.

  require 'rubygems'
  require 'mechanize'
  
  agent = WWW::Mechanize.new
  
  old_filter = agent.body_filter
  agent.body_filter = lambda { |body|
    body.gsub(/(<a[^>]*>)[^<]*(<\/a[^>]*>)/i, "#{$1}Net::DAAP::Client#{$2}")
  }
  
  page = agent.get('http://google.com/')
  page.links.each { |l| puts l.text }
  
  agent.body_filter = old_filter
  page = agent.get('http://google.com/')
  page.links.each { |l| puts l.text }

== Using a proxy

  require 'rubygems'
  require 'mechanize'
  
  agent = WWW::Mechanize.new
  agent.set_proxy('localhost', '8000')
  page = agent.get(ARGV[0])
  puts page.body
